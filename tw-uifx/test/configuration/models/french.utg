treegraph // saved by OmugiGraphExporter on Thu Mar 19 15:33:48 CET 2020

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)

//  CODE SNIPPETS for user-defined functions:

//public class PotentialGrowth extends ChangeStateFunction {
//
//	@Override
//	public void changeState(double t, double dt, SystemComponent focal) {
//		TreeDrv ct = (TreeDrv) focal.currentState();
//		TreeDec dec = (TreeDec) focal.decorators();
//		TreePar par = (TreePar) focal.parameters();
//		double D = ct.d();
//		double H = Allometry.height(par.b1(),par.b2(),par.b3(),D);
//		dec.h(H);
//		double CR = Allometry.crownRadius(par.acr(),par.bcr(),H);
//		dec.cr(CR);
//		// potential growth
//		// resprout growth enhancement factor
//		double rootAge = focal.autoVar().age();
//		double ageDif = rootAge - ct.stemAge() ;
//		double Rs = 1 + par.a()*par.pmax()*ageDif*exp(-par.b()*ageDif);
//		if (H>200) // actually, h95 !!!)
//			Rs = 1;
//		dec.potG(par.g()*Rs); // growth coefficient, not real growth
//		// set count of neighbours to 0 is that right ??
//		dec.nn2(0);
//		dec.nng(0);
//	}
//
//	protected static class Allometry {
//		protected static double height(double b1, double b2, double b3, double d) {
//			return b1 + b2*d + b3*d*d;
//		}
//		protected static double crownRadius(double acr, double bcr, double h) {
//			double logcs = acr + bcr*log(h);
//			double CR = sqrt(exp(logcs)/PI);
//			return CR;
//		}
//		// multiply this by growth coefficients & modifiers to get volume growth
//		protected static double volumeGrowthCoef(double d, double h, double dmax, double hmax) {
//			return d*d*(1-(d*h)/(dmax*hmax));
//		}
//		// multiply this by growth coefficients & modifiers to get height growth
//		protected static double heightGrowthCoef(double d, double h, double dmax, double hmax) {
//			return (dmax-d)*hmax*d*(1-(d*h)/(dmax*hmax)) / (h*dmax*dmax+2*d*hmax*(dmax-d));
//		}
//		// multiply this by growth coefficients & modifiers to get diameter growth
//		protected static double diameterGrowthCoef(double d, double h, double dmax, double hmax) {
//			return dmax*dmax*d*(1-(d*h)/(dmax*hmax)) / (2*h*dmax*dmax+2*d*hmax*(dmax-d));
//		}
//	}
//
//public class Neighbouring extends RelateToDecisionFunction {
//
//	@Override
//	public boolean relate(double t, double dt, SystemComponent focal, SystemComponent other,
//			Location focalLocation, Location otherLocation) {
//		TreeDec fdec = (TreeDec)focal.decorators();
//		TreeDec odec = (TreeDec)other.decorators();
//		return	sqr(fdec.cr()+odec.cr()) > squaredEuclidianDistance(focalLocation.asPoint(),otherLocation.asPoint());
//	}
//
//}
//
///public class Competition extends ChangeOtherStateFunction {
//
//	@Override
//	public void changeOtherState(double t, double dt, SystemComponent focal, SystemComponent other) {
//		TreeDec fdec = (TreeDec) focal.decorators();
//		TreeDec odec = (TreeDec)other.decorators();
//		// number of neighbours > 2m
//		if (odec.h()>200) fdec.nn2(fdec.nn2()+1);
//		// number of taller neighbours
//		if (odec.h()>fdec.h()) fdec.nng(fdec.nng()+1);
//	}
//
//}
//
//public class ActualGrowth extends ChangeStateFunction {
//
//	@Override
//	public void changeState(double t, double dt, SystemComponent focal) {
//		TreeDec dec = (TreeDec) focal.decorators();
//		TreePar par = (TreePar) focal.parameters();
//		TreeDrv ct = (TreeDrv) focal.currentState();
//		TreeDrv nxt = (TreeDrv) focal.nextState();
//		// competition with grass
//		double ctg = par.cg() +(1-par.cg())/(1+par.bg()*exp(-par.ccg()*dec.h()/100));
//		ctg = ctg*max(dec.nn2()/6,1);
//		// competition with neighbours
//		double ctt = exp(-par.alpha()*dec.nng());
//		// actual growth
//		dec.G(dec.potG()*ctg*ctt);
//		// computation of next diameter
//		nxt.d(ct.d()+dec.G()*Allometry.diameterGrowthCoef(ct.d(),dec.h(),par.Dmax(),par.Hmax())/dt);
//	}
//
//}
//
//public class Reproduction extends CreateOtherDecisionFunction {
//
//	@Override
//	public double nNew(double t, double dt, SystemComponent focal, String newType) {
//		if (newType.equals(focal.membership().categoryId())) {
//			TreePar par = (TreePar) focal.parameters();
//			TreeDec dec = (TreeDec) focal.decorators();
//			TreeDrv ct = (TreeDrv) focal.currentState();
//			long age = focal.autoVar().age();
//			double nsdl =0.0;
//			if ((age>=par.ageMin())&(age<=par.ageMax())) {
//				double h = dec.h();
//				double d = ct.d();
//				double hcoef = Allometry.heightGrowthCoef(d,h,par.Dmax(),par.Hmax());
//				double nextHmax = h + hcoef*dec.potG();
//				double nextHact = h + hcoef*dec.G();
//				// max crown radius if no competition
//				double nextCRmax = Allometry.crownRadius(par.acr(), par.bcr(), nextHmax);
//				// crown radius if competition
//				double nextCRact = Allometry.crownRadius(par.acr(), par.bcr(), nextHact);
//				nsdl = par.pcfec() * nextCRact/nextCRmax * (1-ct.stemAge()/par.ageMax());
//			}
//			return nsdl;
//		}
//		else
//			return 0.0;
//	}
//
//}
//
//public class Survival extends DeleteDecisionFunction {
//
//	@Override
//	public boolean delete(double t, double dt, SystemComponent focal) {
//		TreePar par = (TreePar) focal.parameters();
//		long age = focal.autoVar().age();
//		TreeDec dec = (TreeDec) focal.decorators();
//		int agemin = par.ageMin();
//		int agemax = par.ageMax();
//		double Smin = par.Smin();
//		double Smax = par.Smax();
//		// base survival
//		double S = 1.0; // survival probability
//		if (age<=agemin) {
//			double c1 = E*(Smax-Smin)/agemin; // secondary parameter
//			S = Smin + c1*age*exp(-age/agemin);
//		}
//		else if (age<=agemax) {
//			S = Smax;
//		}
//		else {
//			double c2 = exp(1/3)*Smax/agemax; // secondary parameter
//			S = c2*age*exp(-(1/3)*(age/agemax));
//		}
//		// effect of competition on survival
//		double Sg = 1.0;
//		if (dec.G() < dec.potG()*0.95)
//			Sg = dec.G()/(dec.potG()*0.95);
//		return decide(1-S*Sg);
//	}
//
//}
//
//public class FuelIncrease extends ChangeStateFunction {
//
//	@Override
//	public void changeState(double t, double dt, SystemComponent focal) {
//		FireDrv ct = (FireDrv) focal.currentState();
//		FireDrv nxt = (FireDrv) focal.nextState();
//		nxt.tslf(ct.tslf()+1);
//	}
//
//}

// WIP...

// TREE
3worlds french
	dataDefinition dtDef
		record firePar
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(firePar)
			field h95sd
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field h95m
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field fireHet
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field freq
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		record treeDrv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(treeDrv)
			field d
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
			field lowGrowthCounter
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(y)
			field stemAge
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(yr)
		record fireDrv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(fireDrv)
			field h95a
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.1)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field tslf
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(year)
		record treePar
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(treePar)
			field Hmax
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(10.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
			field cgc
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field bgc
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field Dmax
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.1)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
			field Smin
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field fireH95
				interval = fr.ens.biologie.generic.utils.Interval([0.0,10.0])
				precision = java.lang.Double(0.1)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field pmax
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field CRMax
				interval = fr.ens.biologie.generic.utils.Interval([0.0,10.0[)
				precision = java.lang.Double(0.1)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field pcfec
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field ageMax
				range = au.edu.anu.rscs.aot.util.IntegerRange(1..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			field ageRepro
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(y)
			field minGrw
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field Smax
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field grassHt
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field ageMin
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			field grassComp
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field rgr
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field C2
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field C1
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field a
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field bcr
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field hini
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(m)
			field acr
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field optAge
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(y)
			field dini
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
			field b
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field alpha
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field dispersal
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field pmax2
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1.0])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		record treeDec
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(treeDec)
			field nn2
				range = au.edu.anu.rscs.aot.util.IntegerRange(MIN_INTEGER..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			field h
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
			field nng
				range = au.edu.anu.rscs.aot.util.IntegerRange(MIN_INTEGER..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
			field G
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field potG
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field cr
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String(cm)
	experiment exp
		timePeriod tp
			end = fr.cnrs.iees.twcore.constants.DateTimeType(0)
			start = fr.cnrs.iees.twcore.constants.DateTimeType(0)
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	system system
		dynamics dyn
			initialiser Init
				userClassName = java.lang.String(code.system.Init)
			timeLine timeLine
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(YEAR)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(MONO_UNIT)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(YEAR)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timeModel step
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					runAtTimeZero = java.lang.Boolean(false)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(YEAR)
					process proc1
						function PotentialGrowth
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.system.PotentialGrowth)
					process proc3
						function ActualGrowth
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.system.ActualGrowth)
					process proc2
						function Neighbouring
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(RelateToDecision)
							userClassName = java.lang.String(code.system.Neighbouring)
					process proc2b
						function Competition
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeOtherState)
							userClassName = java.lang.String(code.system.Competition)
					process proc5
						function FuelIncrease
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.system.FuelIncrease)
					process proc4
						function Reproduction
							relateToProduct = java.lang.Boolean(false)
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(CreateOtherDecision)
							userClassName = java.lang.String(code.system.Reproduction)
						function Survival
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(DeleteDecision)
							userClassName = java.lang.String(code.system.Survival)
					process proc6
						function TopKill
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeOtherState)
							userClassName = java.lang.String(code.system.TopKill)
			initialState Lamto
				group std-tree
					component tree1
						variableValues varVals
							d = java.lang.Double(20.0)
							lowGrowthCounter = java.lang.Integer(0)
							stemAge = java.lang.Integer(50)
					parameterValues parVals
						Dmax = java.lang.Double(45.0)
						Hmax = java.lang.Double(800.0)
						Smax = java.lang.Double(0.999)
						Smin = java.lang.Double(0.2)
						a = java.lang.Double(-1.0)
						acr = java.lang.Double(-1.305)
						ageMax = java.lang.Integer(70)
						ageMin = java.lang.Integer(8)
						alpha = java.lang.Double(0.32)
						b = java.lang.Double(-1.0)
						b1 = java.lang.Double(0.0)
						b2 = java.lang.Double(58.5)
						b3 = java.lang.Double(-1.26)
						bcr = java.lang.Double(1.998)
						bg = java.lang.Double(-1.0)
						ccg = java.lang.Double(-1.0)
						cg = java.lang.Double(0.2)
						g = java.lang.Double(57.0)
						pcfec = java.lang.Double(10.0)
						pmax = java.lang.Double(0.5)
		structure struct
			categorySet environment
				category disturbance
			componentType tree
				decoratorClass = java.lang.String(code.system.TreeDec)
				driverClass = java.lang.String(code.system.TreeDrv)
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(ephemeral)
				mobile = java.lang.Boolean(false)
				parameterClass = java.lang.String(code.system.TreePar)
				relocateFunctionName = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"","code.system.Plot_TreeRelocateFunction"))
			arena arena
				space plot
					edgeEffects = fr.cnrs.iees.twcore.constants.EdgeEffects(noCorrection)
					precision = java.lang.Double(0.1)
					type = fr.cnrs.iees.twcore.constants.SpaceType(continuousFlatSurface)
					units = java.lang.String(m)
					x-limits = fr.ens.biologie.generic.utils.Interval([0.0,50.0])
					y-limits = fr.ens.biologie.generic.utils.Interval([0.0,50.0])
			categorySet plants
				category trees
			relationType burning
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(ephemeral)
			relationType neighbour
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
			componentType fire
				driverClass = java.lang.String(code.system.FireDrv)
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
				mobile = java.lang.Boolean(false)
				parameterClass = java.lang.String(code.system.FirePar)
				relocateFunctionName = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]""))
	userInterface gui
		top toolBar
			widget time
				order = java.lang.Integer(1)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleTimeWidget)
			widget ctrl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleControlWidget)

// CROSS-LINKS
[category:trees] drivers drvs [record:treeDrv]
[category:trees] decorators decs [record:treeDec]
[category:trees] parameters pars [record:treePar]
[initialiser:Init] appliesTo aplyTo7 [category:trees]
[componentType:fire] belongsTo blngsTo1 [category:disturbance]
[experiment:exp] baseLine baseline [system:system]
[componentType:tree] belongsTo blngsTo [category:trees]
[process:proc5] appliesTo aplyTo4 [category:disturbance]
[process:proc4] dependsOn depsOn3 [process:proc3]
[process:proc4] appliesTo aplyTo3 [category:trees]
[category:disturbance] parameters pars1 [record:firePar]
[category:disturbance] drivers drvs1 [record:fireDrv]
[process:proc3] appliesTo aplyTo2 [category:trees]
[process:proc3] dependsOn depsOn [process:proc2b]
[process:proc2] inSpace in [space:plot]
	searchRadius = java.lang.Double(6.0)
[process:proc2] appliesTo aplyTo6 [relationType:neighbour]
[process:proc2] dependsOn depsOn1 [process:proc1]
[process:proc1] appliesTo aplyTo [category:trees]
[group:std-tree] groupOf grpOf [componentType:tree]
[relationType:neighbour] fromCategory from [category:trees]
[relationType:neighbour] toCategory to [category:trees]
[component:tree1] location loc [space:plot]
	coordinates = au.edu.anu.rscs.aot.collections.tables.DoubleTable(([2]25.0,25.0))
[component:tree1] instanceOf instOf [componentType:tree]
[process:proc2b] appliesTo aplyTo5 [relationType:neighbour]
[process:proc2b] dependsOn depsOn4 [process:proc2]
[relationType:burning] fromCategory from2 [category:disturbance]
[relationType:burning] toCategory to2 [category:trees]
[widget:time] trackTime tracks1 [dynamics:dyn]
[process:proc6] dependsOn depsOn2 [process:proc3]
[process:proc6] appliesTo aplyTo1 [relationType:burning]