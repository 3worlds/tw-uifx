treegraph // saved by OmugiGraphExporter on Mon Oct 14 10:26:26 AEDT 2019

// Test file for a simple datatracker (TimeSeriesDataTracker)
// 1 data tracker, 2 variables to track (x:double, n:integer)
// cf in the function specification below the code to add in the user project

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	
// TREE
3worlds testdatatracker2
	experiment exp
		timePeriod period
			end = fr.cnrs.iees.twcore.constants.DateTimeType(0)
			start = fr.cnrs.iees.twcore.constants.DateTimeType(0)
		design design1
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	userInterface ui
		tab tab1
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			widget timeSeries
				order = java.lang.Integer(0)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleTimeSeriesWidget)
		top top1
			widget time
				order = java.lang.Integer(1)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleTimeWidget)
			widget ctrl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleControlWidget)
	dataDefinition dd
		record Rec
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(Rec)
			field x
				interval = fr.ens.biologie.generic.utils.Interval([0.0,1])
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field n
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..2)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String()
	system sys
		parameterClass = java.lang.String()
		dynamics dyn
			initialState state
				component instance
					variableValues values
						x = java.lang.Double(1.0)
			timeLine tl
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(HOUR)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(MONO_UNIT)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(HOUR)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timeModel clock
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					runAtTimeZero = java.lang.Boolean(false)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(HOUR)
					process proc
						dataTracker dt
							groupBy = fr.cnrs.iees.twcore.constants.Grouping(NO_GROUPING)
							select = fr.cnrs.iees.twcore.constants.SamplingMode(FIRST)
							statistics = fr.cnrs.iees.twcore.constants.StatisticalAggregatesSet({MEAN})
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.TimeSeriesTracker)
							tableStatistics = fr.cnrs.iees.twcore.constants.StatisticalAggregatesSet({MEAN})
							viewOthers = java.lang.Boolean(false)
						function Func
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys.Func)		
//
// Copy and paste this text in the changeState(...) method of the generated Func.java class
// in order to see things displayed in the SimpleTimeSeriesWidget
//
//	System.out.println("current = "+((Rec)focal.currentState()).x()
//		+" "+((Rec)focal.currentState()).n());
//	double x = Math.random();
//	((Rec)focal.nextState()).x(x);
//	((Rec)focal.nextState()).n((int)(Math.round(x*8)/4));
//	System.out.println("next = "+((Rec)focal.nextState()).x()
//		+" "+((Rec)focal.nextState()).n());
//
		structure struc
			componentType comp
				driverClass = java.lang.String(code.sys.Rec)
				lifeSpan = fr.cnrs.iees.twcore.constants.LifespanType(permanent)
			categorySet set
				category cat

// CROSS-LINKS
[componentType:comp] belongsTo belongsTo1 [category:cat]
[experiment:exp] baseLine baseLine1 [system:sys]
[component:instance] instanceOf instanceOf1 [componentType:comp]
[widget:timeSeries] trackSeries trackSeries1 [dataTracker:dt]
[category:cat] drivers drivers1 [record:Rec]
[process:proc] appliesTo appliesTo1 [category:cat]
[widget:time] trackTime trackTime1 [dynamics:dyn]
[dataTracker:dt] trackField [field:x]
[dataTracker:dt] trackField [field:n]
