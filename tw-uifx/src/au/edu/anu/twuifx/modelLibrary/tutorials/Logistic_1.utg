treegraph // saved by OmugiGraphExporter on Wed May 13 06:04:06 AEST 2020

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)

// CODE snippet for method Logistic.chaos(...)
//		focalDrv.x = r*x*(1-x);

// TREE
3worlds Logistic1
	authors = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"Jacques Gignoux","Ian D. Davies"))
	built-by = java.lang.String()
	contacts = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"jacques.gignoux@upmc.fr","Ian.Davies@anu.edu.au"))
	precis = java.lang.String(The discrete logistic model: a minimal configuration file for 3Worlds. First steps with Process, Function, Widgets and DataTrackers)
	publication = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"https:/en.wikipedia.org/wiki/Logistic_map","https:/en.wikipedia.org/wiki/Chaos_theory"))
	version = java.lang.String(demo)
	predefined *categories*
		record AVEphemeral
			field birthDate
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field age
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		record AVPopulation
			field count
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nAdded
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nRemoved
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
		categorySet *organisation*
			category *assemblage*
			category *atomic*
		categorySet *systemElements*
			category *life cycle*
			category *group*
			category *relation*
			category *component*
			category *space*
			category *arena*
		categorySet *lifespan*
			category *ephemeral*
			category *permanent*
	dataDefinition dDef
		record cst
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(cst)
			field r
				description = java.lang.String()
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		record drv
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(drv)
			field x
				description = java.lang.String()
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
	experiment expt
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	system sys1
		constantClass = java.lang.String(code.sys1.Cst)
		driverClass = java.lang.String(code.sys1.Drv)
		initFunction Init1
			type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
			userClassName = java.lang.String(code.sys1.Init1)
			snippet snpt2
				javaCode = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"focalLtc.r = 3.7","focalDrv.x = 0.01;"))
		dynamics sim1
			stoppingCondition stCd1
				endTime = fr.cnrs.iees.twcore.constants.DateTimeType(100)
				subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.stop.SimpleStoppingCondition)
			timeline tmLn1
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(ARBITRARY)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timer tmr1
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
					process p1
						function Chaos
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.sys1.Chaos)
							snippet snpt1
								javaCode = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]"focalDrv.x = r*x*(1-x);"))
						dataTracker trk1
							sampleSize = java.lang.String()
							samplingMode = fr.cnrs.iees.twcore.constants.SamplingMode(RANDOM)
							statistics = fr.cnrs.iees.twcore.constants.StatisticalAggregatesSet({MEAN})
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
							tableStatistics = fr.cnrs.iees.twcore.constants.StatisticalAggregatesSet({MEAN})
	userInterface gui
		top top
			widget crtl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleControlWidget1)
		tab tab1
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			widget srsx
				order = java.lang.Integer(0)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleTimeSeriesWidget)

// CROSS-LINKS
[process:p1] appliesTo aplyTo1 [category:*arena*]
[dataTracker:trk1] trackComponent trks2 [system:sys1]
[dataTracker:trk1] trackField trks1 [field:x]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"null"))
[category:*ephemeral*] autoVar auto1 [record:AVEphemeral]
[category:*arena*] drivers drvs1 [record:drv]
[category:*arena*] lifetimeConstants ltcs1 [record:cst]
[system:sys1] belongsTo bt3 [category:*atomic*]
[system:sys1] belongsTo bt2 [category:*permanent*]
[system:sys1] belongsTo bt1 [category:*arena*]
[widget:srsx] trackSeries trks3 [dataTracker:trk1]
[category:*assemblage*] autoVar auto2 [record:AVPopulation]