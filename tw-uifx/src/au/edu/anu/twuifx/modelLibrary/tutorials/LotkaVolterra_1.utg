treegraph // saved by OmugiGraphExporter on Wed May 13 06:57:12 AEST 2020

	edge_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)
	node_factory = java.lang.String(au.edu.anu.twcore.root.TwConfigFactory)

// CODE snippet for method LotkaVolterra.init(...)
//		// initialise with random parameters
//		for (int i=0; i<r.size(0); i++) {
//			focalCnt.r.setByInt(random.nextDouble()*2.0,i);
//			focalCnt.K.setByInt(0.2+random.nextDouble(),i);
//			for (int j=0; j<alpha.size(1); j++) {
//				if (i==j)
//					focalCnt.alpha.setByInt(1.0,i,j);
//				else
//					focalCnt.alpha.setByInt(random.nextDouble(),i,j);
//			}
// missing x init values
//		}

// CODE snippet for method LotkaVolterra.growth(...)
//		double integrationStep = 0.01;
//		double[] dxdt = new double[x.size(0)];
//		for (int i=0; i<x.size(0); i++) {
//			double sum = 0;
//			for (int j=0; j<alpha.size(1); j++)
//				sum += alpha.getByInt(i,j) * x.getByInt(j);
//			dxdt[i] = r.getByInt(i) * x.getByInt(i) * (1-sum/K.getByInt(i));
//		}
//		for (int i=0; i<dxdt.length; i++)
//			focalDrv.x.setByInt(x.getByInt(i)+dxdt[i]*dt*integrationStep, i);

// TREE
3worlds LotkaVolterra1
	authors = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"Jacques Gignoux","Ian D. Davies"))
	built-by = java.lang.String(ian (13 Sep. 2020))
	contacts = au.edu.anu.rscs.aot.collections.tables.StringTable(([2]"jacques.gignoux@upmc.fr","Ian.Davies@anu.edu.au"))
	precis = java.lang.String(Tutorial: The Lotka-Volterra multi-species competition model. Illustrates the use of Tables.)
	publication = au.edu.anu.rscs.aot.collections.tables.StringTable(([1]"https://en.wikipedia.org/wiki/Competitive_Lotka%E2%80%93Volterra_equations"))
	version = java.lang.String(demo)
	dataDefinition dDef
		dimensioner nspp
			size = java.lang.Integer(4)
		record cnsts
			dynamic = java.lang.Boolean(false)
			generatedClassName = java.lang.String(cnsts)
			table r
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(growth rate)
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				units = java.lang.String()
			table K
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(carrying capacity)
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				units = java.lang.String()
			table alpha
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(interspecific competition coefficient)
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				units = java.lang.String()
		record drvs
			dynamic = java.lang.Boolean(true)
			generatedClassName = java.lang.String(drvs)
			table x
				dataElementType = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				description = java.lang.String(population size)
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				units = java.lang.String()
	userInterface gui
		top top
			widget ctrl
				order = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleControlWidget1)
		tab tab1
			orientation = fr.cnrs.iees.twcore.constants.UIContainerOrientation(horizontal)
			widget population numbers
				order = java.lang.Integer(0)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleDM0Widget)
			widget population sizes
				order = java.lang.Integer(0)
				sender = java.lang.Integer(0)
				subclass = java.lang.String(au.edu.anu.twuifx.widgets.SimpleTimeSeriesWidget)
	experiment expt
		design dsgn
			type = fr.cnrs.iees.twcore.constants.ExperimentDesignType(singleRun)
	system community
		constantClass = java.lang.String(code.community.Cnsts)
		driverClass = java.lang.String(code.community.Drvs)
		dynamics sim1
			timeline tmLn1
				longestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				scale = fr.cnrs.iees.twcore.constants.TimeScaleType(ARBITRARY)
				shortestTimeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
				timeOrigin = fr.cnrs.iees.twcore.constants.DateTimeType(0)
				timer clock1
					dt = java.lang.Long(1)
					nTimeUnits = java.lang.Integer(1)
					subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer)
					timeUnit = fr.cnrs.iees.twcore.constants.TimeUnits(UNSPECIFIED)
					process p1
						function Growth
							type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(ChangeState)
							userClassName = java.lang.String(code.community.Growth)
							snippet snpt1
								javaCode = au.edu.anu.rscs.aot.collections.tables.StringTable(([9]"double[] dxdt = new double[x.size(0)];","for (int i = 0; i < x.size(0); i++) {","double sum = 0;","for (int j = 0; j < alpha.size(1); j++)","sum += alpha.getByInt(i, j) * x.getByInt(j);","dxdt[i] = r.getByInt(i) * x.getByInt(i) * (1 - sum / K.getByInt(i));","}","for (int i = 0; i < dxdt.length; i++)","focalDrv.x.setByInt(max(x.getByInt(i) + dxdt[i] * dt, 0.0), i);"))
						dataTracker trk1
							sampleSize = java.lang.String()
							subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.tracking.DataTracker0D)
			stoppingCondition stCd1
				endTime = fr.cnrs.iees.twcore.constants.DateTimeType(100)
				subclass = java.lang.String(au.edu.anu.twcore.ecosystem.runtime.stop.SimpleStoppingCondition)
		initFunction Init1
			type = fr.cnrs.iees.twcore.constants.TwFunctionTypes(SetInitialState)
			userClassName = java.lang.String(code.community.Init1)
			snippet snpt2
				javaCode = au.edu.anu.rscs.aot.collections.tables.StringTable(([12]"double initfreq = 1.0 / x.size();","focalDrv.x.fillWith(initfreq);","for (int i = 0; i < r.size(0); i++) {","focalCnt.r.setByInt(random.nextDouble(), i);","focalCnt.K.setByInt(5.0 + initfreq + random.nextDouble(), i);","for (int j = 0; j < alpha.size(1); j++) {","if (i == j)","focalCnt.alpha.setByInt(1.0, i, j);","else","focalCnt.alpha.setByInt(max(0.0001, random.nextDouble()), i, j);","}","}"))
	predefined *categories*
		categorySet *organisation*
			category *atomic*
			category *assemblage*
		categorySet *systemElements*
			category *arena*
			category *component*
			category *relation*
			category *life cycle*
			category *group*
		record AVPopulation
			field nRemoved
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field count
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
			field nAdded
				range = au.edu.anu.rscs.aot.util.IntegerRange(0..*)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
				units = java.lang.String(#)
		record AVEphemeral
			field birthDate
				interval = fr.ens.biologie.generic.utils.Interval(]-∞,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
			field age
				interval = fr.ens.biologie.generic.utils.Interval([0.0,+∞[)
				precision = java.lang.Double(0.0)
				type = fr.cnrs.iees.twcore.constants.DataElementType(Double)
				units = java.lang.String()
		categorySet *lifespan*
			category *permanent*
			category *ephemeral*

// CROSS-LINKS
[process:p1] appliesTo aplyTo1 [category:*arena*]
[widget:population numbers] trackSeries trks4 [dataTracker:trk1]
[table:K] sizedBy szBy1 [dimensioner:nspp]
	rank = java.lang.Integer(0)
[dataTracker:trk1] trackTable trks1 [table:x]
	index = fr.cnrs.iees.twcore.constants.TrackerType(([1]"[0:3]"))
[dataTracker:trk1] trackComponent trks2 [system:community]
[category:*assemblage*] autoVar auto [record:AVPopulation]
[category:*ephemeral*] autoVar auto1 [record:AVEphemeral]
[table:alpha] sizedBy szBy3 [dimensioner:nspp]
	rank = java.lang.Integer(1)
[table:alpha] sizedBy szBy2 [dimensioner:nspp]
	rank = java.lang.Integer(0)
[category:*arena*] constants cnsts1 [record:cnsts]
[category:*arena*] drivers drvs1 [record:drvs]
[system:community] belongsTo bt1 [category:*arena*]
[system:community] belongsTo bt2 [category:*atomic*]
[system:community] belongsTo bt3 [category:*permanent*]
[table:r] sizedBy szBy4 [dimensioner:nspp]
	rank = java.lang.Integer(0)
[table:x] sizedBy szBy5 [dimensioner:nspp]
	rank = java.lang.Integer(0)
[widget:population sizes] trackSeries trks3 [dataTracker:trk1]